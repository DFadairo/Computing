import tkinter as tk
from tkinter import messagebox
from coursework import *

def validate_input(P):
    # Allow empty input or check if the input is an integer
    if P == "" or (P.isdigit() and len(P) == 1):
        return True
    else:
        return False

class Grid:
    def __init__(self,board):
        self.board = board
        self.window = tk.Tk()
        self.window.title("David's Sudoku")
        self.window.geometry("1000x900")
        self.entries = {}

    def display_grid(self):
        # creating a canvas to draw the grid onto
        my_canvas = tk.Canvas(self.window, width=1000, height=1000, bg="white")
        my_canvas.place(x=0,y=0)
        x=50
        while x<=950:
            # create the lines inside the boxes by adding 100 to the x-coordinate#
            my_canvas.create_line(x, 50, x, 950, fill="black", width=3)          #
            x+=100                                                               #
        y=50                                                                     #
        while y<=950:                                                            #
            my_canvas.create_line(50, y, 950, y, fill="black", width=3)          #
            y+=100                                                               #
        # create the thicher lines around the boxes and whole grid
        x=50                                                                   
        while x<=950:
            my_canvas.create_line(x, 50, x, 950, fill="black", width = 7)
            x+=300
        y=50
        while y<=950:
            my_canvas.create_line(50, y, 950, y, fill="black", width = 7)
            y+=300
        
        # initialising a dictionary to store the entries in
        self.entries = {}
        validate_cmd = self.window.register(validate_input)

        for row in range(9):
            # creating a 2d dictionary by creating a dictionary in the self.entries dictionary for every row in the array
            self.entries[row] = {}
            for col in range(9):
                # creating the entry that will allow input asn setting the font ty[em size and positiong]
                entry = tk.Entry(self.window, font=("Arial Rounded MT Bold", 50), justify="center", validate="key", validatecommand=(validate_cmd, '%P'))

                x_pos = 55+(col*100)
                y_pos = 55+(row*100)
                
                # placing each entry into a cell in the grid
                entry.place(x=x_pos,y=y_pos, width=90,height=90)
                
                # any numbers in the board between 1-9 will be displayed in the entry
                if self.board[row][col] in range(1,10):
                    entry.insert(0,self.board[row][col])
                self.entries[row][col] = entry

    def navigate_grid(self, event):
        # get the currently selected entry
        current_entry = self.window.focus_get()

        # find its position in the grid
        for row in range(9):
            for col in range(9):
                if self.entries[row][col] == current_entry:
                    # find new selected entry based on key pressed
                    if event.keysym == "Up" and row > 0:
                        self.entries[row - 1][col].focus_set()  # Move up
                    elif event.keysym == "Down" and row < 8:
                        self.entries[row + 1][col].focus_set()  # Move down
                    elif event.keysym == "Left" and col > 0:
                        self.entries[row][col - 1].focus_set()  # Move left
                    elif event.keysym == "Right" and col < 8:
                        self.entries[row][col + 1].focus_set()  # Move right
                    return  # Exit after handling the event


class Screen(Grid):

    def __init__(self,board):
        # inherit methods from the grid class
        super().__init__(board)
        self.display_grid()
        self.check()
        self.reset()
        self.solve()
        self.hint()
        self.generate()
        self.window.bind("<Key>", self.navigate_grid)
    
    def click_check(self):
        for row in range(9):
            for col in range(9):
                # get value from each entry in the dictionary
                value = self.entries[row][col].get().strip()
                
                if value == "":
                    # if the value isn't a number then the corresponding position in the array will be set to 0
                    self.board[row][col] = 0
                else:
                    # if the board is a number that value will be set in the array
                    self.board[row][col] = int(value)
        
        #prints a message depending on what state the board is in
        if not find_empty(self.board) and ValidGrid(self.board):
            messagebox.showinfo("Congrats", "You have solved the puzzle")
        else:
            if ValidGrid(self.board):
                messagebox.showinfo("Check", "Board is valid!")
            else:
                messagebox.showinfo("Check", "Board is invalid!")
    def click_reset(self):
        # clears the array then displays it
        self.board = [[0 for _ in range(9)] for _ in range(9)]
        self.display_grid()
    def click_solve(self):
        for row in range(9):
            for col in range(9):
                value = self.entries[row][col].get().strip()
                
                if value == "":
                    self.board[row][col] = 0
                else:
                    self.board[row][col] = int(value)
        
        backtracking(self.board)
        self.display_grid()
    def click_generate(self):
        answer = messagebox.askyesno("Difficulty", "Please Choose a Difficulty, yes for easy, no for hard")
        self.board = [[0 for _ in range(9)] for _ in range(9)]
        generate(self.board,answer)
        self.display_grid()
    def click_hint(self):
        hint(self.board)
        self.display_grid()


    
    def check(self):
        check_b = tk.Button(self.window, text="Check", command=self.click_check, font=("Cambria", 100))
        check_b.place(x=1050,y=450, width=820, height=160)
    def reset(self):
        reset_b = tk.Button(self.window, text="Reset", command=self.click_reset, font=("Cambria", 100))
        reset_b.place(x=1050,y=630, width=820, height=160)    
    def solve(self):
        solve_b = tk.Button(self.window, text="Solve", command=self.click_solve, font=("Cambria", 100))
        solve_b.place(x=1050,y=90, width=820, height=160)
    def hint(self):
        hint_b = tk.Button(self.window, text="Hint", command=self.click_hint, font=("Cambria", 100))
        hint_b.place(x=1050,y=270, width=820, height=160)
    def generate(self):
        generate_b = tk.Button(self.window, text="Generate", command=self.click_generate, font=("Cambria", 100))
        generate_b.place(x=1050,y=810, width=820, height=160)

    
if __name__ == "__main__":
    board1 = [[0 for _ in range(9)] for _ in range(9)]  # Initialize a 9x9 board with zeros
    app = Screen(board1)  # Create the Screen instance with the board
    app.window.mainloop()  # Start the Tkinter main loop

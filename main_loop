test_G = [
    [4, 9, 5, 0, 7, 0, 3, 0, 8],
    [7, 0, 0, 0, 8, 3, 0, 9, 2],
    [3, 0, 0, 1, 9, 0, 0, 0, 7],
    [0, 0, 4, 2, 1, 0, 0, 3, 0],
    [0, 0, 6, 3, 0, 0, 1, 2, 9],
    [2, 0, 3, 8, 0, 9, 0, 0, 0],
    [1, 4, 9, 0, 0, 6, 0, 0, 0],
    [0, 5, 0, 4, 0, 0, 0, 6, 0],
    [0, 0, 0, 0, 0, 8, 7, 4, 0]]

board1 = [[6, 7, 2, "_","_","_","_","_", 9],
          [1,"_", 5, 8, 4,"_","_","_", 7],
          ["_", 8,"_","_", 2, 7,"_","_","_"],
          ["_","_","_", 3, 7, 2, 4, 9,"_"],
          [3, 9,"_","_","_","_","_","_","_"],
          [7,"_","_","_","_", 8,"_", 1, 5],
          [8, 5, 7,"_", 1,"_","_","_",""],
          ["_","","_","_", 9, 5, 6, 8,"_"],
          ["_","_", 1, 4,"_", 3, 5,"_","_"]] 

board2 = [[0, 7, 2, "_","_","_","_","_", 9],
          [1,"_", 5, 8, 4,"_","_","_", 7],
          ["_", 8,"_","_", 2, 7,"_","_","_"],
          ["_","_","_", 0, 7, 2, 4, 9,"_"],
          [3, 9,"_","_","_","_","_","_","_"],
          [7,"_","_","_","_", 8,"_", 1, 5],
          [8, 5, 7,"_", 1,"_","_","_",""],
          ["_","","_","_", 9, 5, 6, 8,"_"],
          ["_","_", 1, 0,"_", 3, 5,"_","_"]] 

import random as r

grid = [[0 for _ in range(9)] for _ in range(9)]  # main game grid
# each array is a box
def isValidDigit(value):
    try:
        if value >=1 and value <=9:
            return True
    except:
        if not isinstance(value,int):
            return False
    return False

def ValidGrid(board):

    # iterate over the 2D array using variables row and col
    for row in range(9):
        # create temporary array to store 1s and 0s
        temp = [0 for _ in range(10)]
        for col in range(9):
            # if the value isn't 0, if it is go to the next value
            if board[row][col] in range(1,10):
                # if the position of the value in board in temp is 0 then change it to 1
                if temp[board[row][col]] == 0:
                    temp[board[row][col]] = 1
                # if it isn't 0, then the value has already been seen
                else:
                    return False
            else:
                col+=1
    
    # iterate over the 2D array using variables col and row switched around so that it can iterate downards through the columns
    for col in range(9):
        # create temporary array
        temp = [0 for _ in range(10)]
        for row in range(9):
            # if the value isn't 0, if it is go to the next value
            if board[row][col] in range(1,10):
                # if the position of the value in board in temp is 0 then change it to 1
                if temp[board[row][col]] == 0:
                    temp[board[row][col]] = 1
                # if it isn't 0, then the value has already been seen
                else:
                    return False
            else:
                row+=1

    # iterate over each 3x3 box using variables boxRow and boxCol to get the starting position
    for boxRow in range(0, 9, 3):
        for boxCol in range(0, 9, 3):
            # create temporary array for 1s and 0s
            temp = [0 for _ in range(10)]
            
            # iterate over each cell in the current 3x3 box
            for row in range(boxRow, boxRow + 3):
                for col in range(boxCol, boxCol + 3):
                    # if the value isn't 0
                    if board[row][col] in range(1,10):
                        # if the position of the value in board in temp is 0 then change it to 1
                        if temp[board[row][col]] == 0:
                            temp[board[row][col]] = 1
                        # if it isn't 0, then the value has already been seen
                        else:
                            return False
                    else:
                        col+=1

    
    return True

def find_empty(board):
    # find an empty cell in the board
    for row in range(9):
        for col in range(9):
            if board[row][col] not in range(1,10):
                return (row,col)   # returning the row and column that of an empty space
    return False


def backtracking(board):

    empty_cells = [(row, col) for row in range(9) for col in range(9) if not isValidDigit(board[row][col])]
    if len(empty_cells) == 81:
        return False


    # Find empty cell
    empty = find_empty(board)
    
    # If no empty cell is found, the board is solved
    if not empty:
        return True
    
    row, col = empty
    
    # Try digits 1 to 9
    for num in range(1, 10):
        # Place the number
        board[row][col] = num
        
        # Check if the board is still valid
        if ValidGrid(board):
            # Recursively try to solve the rest of the board
            if backtracking(board):
                return True
        
        # If placing the number didn't lead to a solution, backtrack by setting it to 0
        board[row][col] = 0
    
    # If no number worked, return False to trigger backtracking
    return False


def hint(board):
    # Find all empty cells
    empty_cells = [(row, col) for row in range(9) for col in range(9) if not isValidDigit(board[row][col])]

    # If no empty cells, return (no hint possible)
    if not empty_cells:
        return None
    
    # Select a random empty cell
    row, col = r.choice(empty_cells)

    # Create a copy of the board
    board_copy = [row[:] for row in board]

    # Solve the copied board
    if not backtracking(board_copy):  # Assuming backtracking() returns True if successful
        return False

    # Place one number into the original board
    board[row][col] = board_copy[row][col]
    return (True,row,col)



def generate(board,difficulty):
    #pick a random number between 1 and 9 so that the generation is different everytime
    for col in range(9):
        board[0][col] = r.randint(1,9)
    #keep on picking random numbers until the board is valid
    while not ValidGrid(board):
        for col in range(9):
            board[0][col] = r.randint(1,9)
    
    backtracking(board) #use the backtracking algorithm to complete the board

    #the amount of empty spaces depends fully on the difficulty
    if difficulty:
        k = r.randint(30,40)
    else:
        k = r.randint(40,50)

    #repeat this process depending on difficulty
    for i in range(k):
        # choose a random row
        r_row = r.choice(board)

        # iterate over the 2d array
        for row in range(9):
            # find where row in board and r_row are the same
            if r_row == board[row]:
                pos_row = row
            else:
                row+=1

        # pick one cell from the row was the column value
        r_col = r.choice(r_row)
        while r_col not in range(1,10):
            r_col = r.choice(r_row)

        for i in range(9):
            if r_row[i] == r_col:
                pos_col = i
            else:
                i+=1

        board[pos_row][pos_col] = 0


    # use mod for minutes
    # use remainder for seconds

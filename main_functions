test_G = [
    [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [1, 9, 8, 3, 4, 2, 5, 6, 7],
    [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 6, 1, 5, 3, 7, 2, 8, 4],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 4, 5, 2, 8, 6, 1, 7, 9]]

board1 = [[6, 7, 2, "_","_","_","_","_", 9],
          [1,"_", 5, 8, 4,"_","_","_", 7],
          ["_", 8,"_","_", 2, 7,"_","_","_"],
          ["_","_","_", 3, 7, 2, 4, 9,"_"],
          [3, 9,"_","_","_","_","_","_","_"],
          [7,"_","_","_","_", 8,"_", 1, 5],
          [8, 5, 7,"_", 1,"_","_","_",""],
          ["_","","_","_", 9, 5, 6, 8,"_"],
          ["_","_", 1, 4,"_", 3, 5,"_","_"]] 


import random as r

grid = [0 for n in range(81)]  # main game grid
# each array is a box

def ValidGrid(board):

    # iterate over the 2D array using variables row and col
    for row in range(9):
        # create temporary array to store 1s and 0s
        temp = [0 for _ in range(10)]
        for col in range(9):
            # if the value isn't 0, if it is go to the next value
            if board[row][col] in range(1,10):
                # if the position of the value in board in temp is 0 then change it to 1
                if temp[board[row][col]] == 0:
                    temp[board[row][col]] = 1
                # if it isn't 0, then the value has already been seen
                else:
                    return False
            else:
                col+=1
    
    # iterate over the 2D array using variables col and row switched around so that it can iterate downards through the columns
    for col in range(9):
        # create temporary array
        temp = [0 for _ in range(10)]
        for row in range(9):
            # if the value isn't 0, if it is go to the next value
            if board[row][col] in range(1,10):
                # if the position of the value in board in temp is 0 then change it to 1
                if temp[board[row][col]] == 0:
                    temp[board[row][col]] = 1
                # if it isn't 0, then the value has already been seen
                else:
                    return False
            else:
                row+=1

    # iterate over each 3x3 box using variables boxRow and boxCol to get the starting position
    for boxRow in range(0, 9, 3):
        for boxCol in range(0, 9, 3):
            # create temporary array for 1s and 0s
            temp = [0 for _ in range(10)]
            
            # iterate over each cell in the current 3x3 box
            for row in range(boxRow, boxRow + 3):
                for col in range(boxCol, boxCol + 3):
                    # if the value isn't 0
                    if board[row][col] in range(1,10):
                        # if the position of the value in board in temp is 0 then change it to 1
                        if temp[board[row][col]] == 0:
                            temp[board[row][col]] = 1
                        # if it isn't 0, then the value has already been seen
                        else:
                            return False
                    else:
                        col+=1

    
    return True

def find_empty(board):
    # find an empty cell in the board
    for row in range(9):
        for col in range(9):
            if board[row][col] not in range(1,10):
                return True
    return False


def backtracking(board):
    if not find_empty(board):
        return True
    
    # Find an empty cell
    for row in range(9):
        for col in range(9):
            if board[row][col] not in range(1, 10):
                # Try digits 1-9 in this empty cell
                for num in range(1, 10):
                    # Place the number
                    board[row][col] = num
                    
                    # Check if valid and recursively solve
                    if ValidGrid(board) and backtracking(board):
                        return True
                    
                    # If placing num didn't lead to a solution, backtrack
                    board[row][col] = 0
                
                # If no number worked, this path is invalid
                return False
    
    return True

def hint(board):
    test_g = board
    backtracking(test_g)
    for row in range(9):
        for col in range(9):
            if test_g[row][col] == board[row][col]:
                test_g[row][col] = 0
            
    r_row = r.choice(test_g)

    for row in range(9):
        if r_row == test_g[row]:
            pos_row = row
        else:
            row+=1

    r_col = r.choice(r_row)
    while r_col not in range(1,10):
        r_col = r.choice(r_row)

    for item in range(9):
        if r_col == r_row[item]:
            pos_col = item
        else:
            item+=1

    board[pos_row][pos_col] = r_col

def generate(board,difficulty):
    #pick a random number between 1 and 9 so that the generation is different everytime
    for col in range(9):
        board[0][col] = r.randint(1,9)
    while not ValidGrid(board):
        for col in range(9):
            board[0][col] = r.randint(1,9)
    
    backtracking(board)

    if difficulty:
        k = r.randint(30,40)
    else:
        k = r.randint(50,60)

    for i in range(k):
        r_row = r.choice(board)

        for row in range(9):
            if r_row == board[row]:
                pos_row = row
            else:
                row+=1

        r_col = r.choice(r_row)
        while r_col not in range(1,10):
            r_col = r.choice(r_row)

        for i in range(9):
            if r_row[i] == r_col:
                pos_col = i
            else:
                i+=1

        board[pos_row][pos_col] = 0

import random

grid = [0 for n in range(81)]  # main game grid
# each array is a box
test_G = [
    [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [1, 9, 8, 3, 4, 2, 5, 6, 7],
    [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [9, 6, 1, 5, 3, 7, 2, 8, 4],
    [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [3, 4, 5, 2, 8, 6, 1, 7, 9]]


def ValidGrid(board):

    # iterate over the 2D array using variables row and col
    for row in range(9):
        # create temporary array to store 1s and 0s
        temp = [0 for _ in range(10)]
        for col in range(9):
            # check if the value isn't 0, if it is go to the next value
            if board[row][col] in range(1,10):
                # if the position of the value in board in temp is 0 then change it to 1
                if temp[board[row][col]] == 0:
                    temp[board[row][col]] = 1
                # if it isn't 0 and is 1, then the value has already been seen
                else:
                    return False
            else:
                col+=1
    
    # iterate over the 2D array using variables col and row switched around so that it can iterate downards through the columns
    for col in range(9):
        # create temporary array
        temp = [0 for _ in range(10)]
        for row in range(9):
            # check if the value isn't 0, if it is go to the next value
            if board[row][col] in range(1,10):
                # if the position of the value in board in temp is 0 then change it to 1
                if temp[board[row][col]] == 0:
                    temp[board[row][col]] = 1
                # if it isn't 0 and is 1, then the value has already been seen
                else:
                    return False
            else:
                row+=1

    # iterate over each 3x3 box using variables boxRow and boxCol to get the starting position
    for boxRow in range(0, 9, 3):
        for boxCol in range(0, 9, 3):
            # create temporary array to store 1s and 0s
            temp = [0 for _ in range(10)]
            
            # iterate over each cell in the current 3x3 box
            for row in range(boxRow, boxRow + 3):
                for col in range(boxCol, boxCol + 3):
                    # check if the value isn't 0, if it is go to the next value
                    if board[row][col] in range(1,10):
                        # if the position of the value in board in temp is 0 then change it to 1
                        if temp[board[row][col]] == 0:
                            temp[board[row][col]] = 1
                        # if it isn't 0 and is 1, then the value has already been seen
                        else:
                            return False
                    else:
                        col+=1

    
    return True

def find_empty(board):
    # find an empty cell in the board
    for row in range(9):
        for col in range(9):
            if board[row][col] not in range(1,10):
                return True
    return False

def backtracking(board):
    row = 0
    col = 0
    
    while row < 9:
        # create array of possible values 1-9
        possible_values = [1,2,3,4,5,6,7,8,9]
        
        # remove values that are already in this row
        for c in range(9):
            if board[row][c] != 0 and (board[row][c] in possible_values):
                possible_values.remove(board[row][c])
        
        # if current cell is not empty, move to next cell
        if board[row][col] != 0:
            if col == 8:
                row += 1
                col = 0
            else:
                col += 1
        else:
            success = False
            # try each possible value in current empty cell
            for value in possible_values:
                board[row][col] = value
                if ValidGrid(board):
                    success = True
                    break
            
            # if no value worked, backtrack
            if not success:
                board[row][col] = 0
                # backtrack to previous cell
                if col > 0:
                    col -= 1
                else:
                    row -= 1
                    if row < 0:  # if we've backed up past the first row
                        return False
                    col = 8
            else:
                # move to next cell
                if col == 8:
                    row += 1
                    col = 0
                else:
                    col += 1
    
    return True


def print_board(board):
    """Print Sudoku board in readable format"""
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("- - - - - - - - - - - -")
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("|", end=" ")
            if j == 8:
                print(board[i][j])
            else:
                print(str(board[i][j]) + " ", end="")

